'use strict';
var adler32, alldecoder, allenchashes, allencoder, base85, base91, caesar, cheerio, crc, crypto, decalgos, dechashes, decmd5, decrypter, encalgos, enchashes, hex_parse, recipro, request, rev, rot13, rot18, rot47, rot5, zlib,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

crc = require('crc');

zlib = require('zlib');

crypto = require('crypto');

base85 = require('../lib/base85');

base91 = require('../lib/base91');

caesar = require('caesar-salad');

adler32 = require('adler-32');

cheerio = require('cheerio');

request = require('sync-request');

allencoder = [];

encalgos = ['hex', 'ascii', 'base64', 'ascii85', 'base91', 'rot5', 'rot13', 'rot18', 'rot47', 'rev', 'z85', 'rfc1924', 'crc1', 'crc8', 'crc16', 'crc24', 'crc32', 'adler32', 'url', 'unixtime', 'lower', 'upper', 'deflate'];

enchashes = ['md4', 'md5', 'sha', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'rmd160', 'whirlpool'];

allenchashes = enchashes.concat(crypto.getHashes());

allenchashes = allenchashes.filter(function(x, i, self) {
  return self.indexOf(x) === i;
});

allencoder = allencoder.concat(encalgos, allenchashes);

alldecoder = [];

decalgos = ['hex', 'ascii', 'base64', 'ascii85', 'base91', 'rot5', 'rot13', 'rot18', 'rot47', 'rev', 'z85', 'rfc1924', 'url', 'unixtime', 'zlib'];

dechashes = ['md5'];

alldecoder = alldecoder.concat(decalgos, dechashes);

hex_parse = function(str) {
  var hex;
  hex = str.replace(/0x|:/g, '');
  if (!(hex.length % 2)) {
    return hex;
  } else {
    return false;
  }
};

rot5 = function(str) {
  return caesar.ROT5.Cipher().crypt(str);
};

rot13 = function(str) {
  return caesar.ROT13.Cipher().crypt(str);
};

rot18 = function(str) {
  return caesar.ROT18.Cipher().crypt(str);
};

rot47 = function(str) {
  return caesar.ROT47.Cipher().crypt(str);
};

rev = function(str) {
  return str.split('').reverse().join('');
};

recipro = {
  rot5: rot5,
  rot13: rot13,
  rot18: rot18,
  rot47: rot47,
  rev: rev
};

decmd5 = function(str) {
  var $, baseUrl, error, res, ret_str;
  baseUrl = 'http://www.md5-hash.com/md5-hashing-decrypt/';
  try {
    res = request('GET', baseUrl + str);
  } catch (_error) {
    error = _error;
    return error;
  }
  $ = cheerio.load(res.getBody('utf8'));
  ret_str = $('strong.result').text();
  if (str === encoder(ret_str, 'md5')) {
    return ret_str;
  } else {
    return 'not found';
  }
};

decrypter = {
  md5: decmd5
};

module.exports.encoder = function(str, algo) {
  var buffer, hex;
  switch (algo) {
    case 'hex':
    case 'base64':
      return new Buffer(str).toString(algo);
    case 'ascii85':
      return base85.encode(str, 'ascii85');
    case 'base91':
      if (hex = hex_parse(str)) {
        return base91.encode(Buffer(hex, 'hex')).toString('utf8');
      }
      break;
    case 'ascii':
      if (hex = hex_parse(str)) {
        return Buffer(hex, 'hex').toString('utf8');
      }
      break;
    case 'rot5':
    case 'rot13':
    case 'rot18':
    case 'rot47':
    case 'rev':
      return recipro[algo](str);
    case 'z85':
      return base85.encode(str, 'z85');
    case 'rfc1924':
      return base85.encode(str, 'ipv6');
    case 'crc1':
    case 'crc8':
    case 'crc16':
    case 'crc24':
    case 'crc32':
      return crc[algo](str).toString(16);
    case 'adler32':
      return adler32.str(str).toString(16);
    case 'url':
      return encodeURIComponent(str);
    case 'unixtime':
      return Date.parse(str).toString(10);
    case 'lower':
      return str.toLowerCase();
    case 'upper':
      return str.toUpperCase();
    case 'deflate':
      if (hex = hex_parse(str)) {
        buffer = new Buffer(hex, 'hex');
        return new zlib.Deflate()._processChunk(buffer, zlib.Z_FINISH).toString('hex');
      }
      break;
    default:
      if (indexOf.call(allenchashes, algo) >= 0) {
        return crypto.createHash(algo).update(str, 'utf8').digest('hex');
      }
  }
};

module.exports.decoder = function(str, algo) {
  var buffer;
  switch (algo) {
    case 'hex':
      if (!(str.length % 2)) {
        return new Buffer(str, algo).toString('utf8');
      }
      break;
    case 'base64':
      return new Buffer(str, algo).toString('utf8');
    case 'ascii85':
      return base85.decode(str, 'ascii85').toString('utf8');
    case 'base91':
      return base91.decode(str).toString('hex');
    case 'ascii':
      return new Buffer(str, algo).toString('hex');
    case 'rot5':
    case 'rot13':
    case 'rot18':
    case 'rot47':
    case 'rev':
      return recipro[algo](str);
    case 'z85':
      return base85.decode(str, 'z85').toString('utf8');
    case 'rfc1924':
      return base85.decode(str, 'ipv6').toString('utf8');
    case 'url':
      return decodeURIComponent(str);
    case 'unixtime':
      return new Date(parseInt(str)).toString('utf8');
    case 'deflate':
      if (!(str.length % 2)) {
        buffer = new Buffer(str, 'hex');
        return new zlib.Inflate()._processChunk(buffer, zlib.Z_FINISH).toString('hex');
      }
      break;
    case 'md5':
      return decrypter[algo](str);
    default:
      return 'not implemented';
  }
};

//# sourceMappingURL=data:application/json;base64,